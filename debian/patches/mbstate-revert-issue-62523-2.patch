commit 0ec57bf7b18e8918dd8ced007a88467b798677c6
Author: Jordan Rupprecht <rupprecht@google.com>
Date:   Wed May 10 15:43:37 2023 -0700

    [libc++] Consistently enable __CORRECT_ISO_CPP_WCHAR_H_PROTO in mbstate.
    
    In libc++'s `wchar.h`, before we forward to the system `wchar.h`, we set `__CORRECT_ISO_CPP_WCHAR_H_PROTO` to ensure it defines the correct signature (e.g. `extern "C++" const wchar_t *wmemchr` and not `extern wchar_t *wmemchr`). After D148542, there are cases where we include the system `wchar.h` from within `__mbstate_t.h` without setting that, and so we get a function type mismatch if we transitively include `wchar.h` through multiple headers in a modules-enabled build. Consistently setting it here resolves those build errors.
    
    Alternative 1: we could put this in `__config` instead. I chose to put it here for a more limited scope.
    
    Alternative 2: we could patch `wchar.h` itself to work correctly and remove references `__CORRECT_ISO_CPP_WCHAR_H_PROTO` from libc++ entirely. It does already set it, but with an additional condition that it is being built by GCC >= 4.4. Clang does pretend to be GCC via `__GNUC__` etc. which can be controlled via `-fgnuc-version` command line flags, but that might have other consequences.
    
    Reviewed By: ldionne, #libc, MaskRay
    
    Differential Revision: https://reviews.llvm.org/D150015

Index: llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/include/__mbstate_t.h
===================================================================
--- llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd.orig/libcxx/include/__mbstate_t.h
+++ llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/include/__mbstate_t.h
@@ -27,14 +27,6 @@
 // This does not define std::mbstate_t -- this only brings in the declaration
 // in the global namespace.
 
-// We define this here to support older versions of glibc <wchar.h> that do
-// not define this for clang. This is also set in libc++'s <wchar.h> header,
-// and we need to do so here too to avoid a different function signature given
-// a different include order.
-#ifdef __cplusplus
-#  define __CORRECT_ISO_CPP_WCHAR_H_PROTO
-#endif
-
 #if __has_include(<bits/types/mbstate_t.h>)
 #   include <bits/types/mbstate_t.h> // works on most Unixes
 #elif __has_include(<sys/_types/_mbstate_t.h>)
Index: llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/include/wchar.h
===================================================================
--- llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd.orig/libcxx/include/wchar.h
+++ llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/include/wchar.h
@@ -116,8 +116,6 @@ size_t wcsrtombs(char* restrict dst, con
 #  pragma GCC system_header
 #endif
 
-// We define this here to support older versions of glibc <wchar.h> that do
-// not define this for clang.
 #ifdef __cplusplus
 #define __CORRECT_ISO_CPP_WCHAR_H_PROTO
 #endif
Index: llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/test/std/strings/c.strings/cwchar_include_order1.compile.verify.cpp
===================================================================
--- llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd.orig/libcxx/test/std/strings/c.strings/cwchar_include_order1.compile.verify.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-//===----------------------------------------------------------------------===//
-//
-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-// See https://llvm.org/LICENSE.txt for license information.
-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-//
-//===----------------------------------------------------------------------===//
-
-// <cwchar>
-
-// XFAIL: no-wide-characters
-
-// Tests that include ordering does not affect the definition of wcsstr.
-// See: https://llvm.org/PR62638
-
-// clang-format off
-#include <cwchar>
-#include <iosfwd>
-// clang-format on
-
-void func() {
-  wchar_t* v1;
-  const wchar_t* cv2 = L"/";
-  v1 = wcsstr(cv2, L"/"); // expected-error {{assigning to 'wchar_t *' from 'const wchar_t *' discards qualifiers}}
-}
Index: llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd/libcxx/test/std/strings/c.strings/cwchar_include_order2.compile.verify.cpp
===================================================================
--- llvm-toolchain-snapshot_17~++20230512092652+af161ffc7fdd.orig/libcxx/test/std/strings/c.strings/cwchar_include_order2.compile.verify.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-//===----------------------------------------------------------------------===//
-//
-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-// See https://llvm.org/LICENSE.txt for license information.
-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-//
-//===----------------------------------------------------------------------===//
-
-// <cwchar>
-
-// XFAIL: no-wide-characters
-
-// Tests that include ordering does not affect the definition of wcsstr.
-// See: https://llvm.org/PR62638
-
-// clang-format off
-#include <iosfwd>
-#include <cwchar>
-// clang-format on
-
-void func() {
-  wchar_t* v1;
-  const wchar_t* cv2 = L"/";
-  v1 = wcsstr(cv2, L"/"); // expected-error {{assigning to 'wchar_t *' from 'const wchar_t *' discards qualifiers}}
-}
